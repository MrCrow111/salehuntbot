import feedparser
import asyncio
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
from datetime import datetime
from flask import Flask
from threading import Thread

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = "7758500745:AAGF3Vr0GLbQgk_XudSHGxZVbC33Spwtm3o"
CHANNEL_ID = -1002650552114

RSS_FEEDS = [
    "https://9to5toys.com/feed/",
    "https://www.theverge.com/rss/index.xml",
    "https://www.engadget.com/rss.xml",
    "https://www.wired.com/feed/rss",
    "https://www.cnet.com/rss/news/",
    "https://www.techbargains.com/rss.xml",
    "https://slickdeals.net/newsearch.php?searchin=first&rss=1&sort=latest&forumid[]=9",
]

bot = Bot(token=BOT_TOKEN)
posted_links = set()
message_queue = asyncio.Queue()
LOG_FILE = "bot_log.txt"

# === –ú–∏–Ω–∏-—Å–µ—Ä–≤–µ—Ä Flask ===
app = Flask('')

@app.route('/')
def home():
    return "‚úÖ SaleHunt Bot —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def run_flask():
    app.run(host='0.0.0.0', port=8080)

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
def log_message(message: str):
    print(message)
    try:
        with open(LOG_FILE, "a", encoding="utf-8") as f:
            f.write(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] {message}\n")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥: {e}")

# === –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏ ===
async def message_sender():
    while True:
        message_data = await message_queue.get()
        try:
            if message_data['type'] == 'text':
                await bot.send_message(
                    chat_id=CHANNEL_ID,
                    text=message_data['text'],
                    reply_markup=message_data['markup'],
                    parse_mode='Markdown',
                    disable_web_page_preview=False
                )
            elif message_data['type'] == 'photo':
                await bot.send_photo(
                    chat_id=CHANNEL_ID,
                    photo=message_data['photo'],
                    caption=message_data['caption'],
                    reply_markup=message_data['markup'],
                    parse_mode='Markdown'
                )
            log_message(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_data.get('text', message_data.get('caption', '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞'))}")
        except Exception as e:
            log_message(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {e}")
        await asyncio.sleep(60)  # –ü–∞—É–∑–∞ 1 –º–∏–Ω—É—Ç–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–∏–¥–æ–∫ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Ö –≤ –æ—á–µ—Ä–µ–¥—å ===
async def fetch_and_post_deals():
    print("üîµ –°—Ç–∞—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ fetch_and_post_deals()")

    try:
        await bot.send_message(chat_id=CHANNEL_ID, text="‚úÖ SaleHunt Bot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –ø—É–±–ª–∏–∫—É–µ—Ç —Å–∫–∏–¥–∫–∏ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å!")
        log_message("‚úÖ –ë–æ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª –∏ —Å—Ä–∞–∑—É –ø—É–±–ª–∏–∫—É–µ—Ç —Å–∫–∏–¥–∫–∏ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å.")
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    while True:
        print("üîÑ –ù–∞—á–∞–ª–∞—Å—å –Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–∏–¥–æ–∫...")
        for feed_url in RSS_FEEDS:
            try:
                print(f"üì• –ü—Ä–æ–≤–µ—Ä—è—é —Ñ–∏–¥: {feed_url}")
                feed = feedparser.parse(feed_url, request_headers={'User-Agent': 'Mozilla/5.0 (compatible; SaleHuntBot/1.0)'})

                if feed.bozo:
                    raise Exception(feed.bozo_exception)

                if not feed.entries:
                    log_message(f"‚ö†Ô∏è –§–∏–¥ –ø—É—Å—Ç–æ–π: {feed_url}")
                    continue

                for entry in feed.entries:
                    link = entry.link
                    title = entry.title
                    image_url = ""

                    if 'media_content' in entry:
                        media = entry.media_content
                        if isinstance(media, list) and media:
                            image_url = media[0].get('url', '')
                        elif isinstance(media, dict):
                            image_url = media.get('url', '')

                    if link not in posted_links:
                        posted_links.add(link)

                        message_text = f"üî• {title}"
                        button = InlineKeyboardButton("üëâ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", url=link)
                        markup = InlineKeyboardMarkup([[button]])

                        if image_url:
                            await message_queue.put({
                                'type': 'photo',
                                'photo': image_url,
                                'caption': message_text,
                                'markup': markup
                            })
                        else:
                            await message_queue.put({
                                'type': 'text',
                                'text': message_text,
                                'markup': markup
                            })

                        print(f"üìù –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: {title}")

            except Exception as feed_error:
                log_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–¥–∞: {feed_url} ‚Äî {feed_error}")

        print("üü¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ñ–∏–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–ª—é 1 –º–∏–Ω—É—Ç—É...")
        await asyncio.sleep(60)

# === –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    task1 = asyncio.create_task(fetch_and_post_deals())
    task2 = asyncio.create_task(message_sender())
    await asyncio.gather(task1, task2)

def start_asyncio_loop():
    asyncio.run(main())

# === –°—Ç–∞—Ä—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã ===
if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    flask_thread = Thread(target=run_flask)
    flask_thread.start()

    bot_thread = Thread(target=start_asyncio_loop)
    bot_thread.start()
